DROP DATABASE health_care_system;
CREATE DATABASE health_care_system;
USE health_care_system;

-- ALL SENSITIVE DATA IS ENCRYPTED USING AES 128


-- THE ADMINS TABLE
CREATE TABLE ADMINS (
    ADMIN_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    NATIONAL_ID BIGINT UNIQUE,
    FIRST_NAME VARBINARY(32),
    LAST_NAME VARBINARY(32),
    PICTURE VARBINARY(32),
    EMAIL VARBINARY(336) ,
    PHONE_NUMBER VARBINARY(16), -- FOR BACK UP
    ADDRESS VARBINARY(256),
    HASHED_CODEPIN VARCHAR(72), -- BCrypt
    CARD_EXPIRING_DATE DATE,
    USER_PUBLIC_KEY VARBINARY(131),
    SESSION_KEY varbinary(128),
    INDEX IDX_ADMINS (ADMIN_ID)
);
-- Creating the DOCTORS table without encryption for non-sensitive data
CREATE TABLE DOCTORS (
    DOCTOR_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(32) ,
    LAST_NAME VARCHAR(32) ,
    GENDER TINYINT CHECK (GENDER IN (0,1)), -- 0 for female, 1 for male
    PICTURE VARCHAR(30),
	NATIONAL_ID BIGINT UNIQUE NOT NULL,
    ABOUT TEXT, -- Detailed information about the doctor
    EMAIL VARCHAR(255), -- No need for encryption
    PHONE_NUMBER VARCHAR(16), -- Standard phone number format
    ADDRESS VARCHAR(256),
    HASHED_CODEPIN VARCHAR(72) NOT NULL, -- BCrypt hashed passwords
    CARD_EXPIRING_DATE DATE NOT NULL,
    USER_PUBLIC_KEY VARBINARY(131),
    DOCTOR_STATUS VARCHAR(10) CHECK (DOCTOR_STATUS IN ('ACTIVE', 'INACTIVE', 'DISABLED')),
    INDEX IDX_DOCTORS (DOCTOR_ID, NATIONAL_ID)
);
CREATE TABLE Patients (
    patient_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    first_name VARBINARY(32),
    last_name VARBINARY(32),
    date_of_birth DATE,
    NATIONAL_ID BIGINT UNIQUE,
    gender TINYINT,
    EMAIL VARBINARY(336) ,
    PHONE_NUMBER VARBINARY(16), -- FOR BACK UP
    SESSION_KEY varbinary(128),
    ADDRESS VARBINARY(256),
    INDEX IDX_PATIENTS (PATIENT_ID,NATIONAL_ID)
);

CREATE TABLE Treatments (
    treatment_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    patient_id BIGINT,
    doctor_id BIGINT,
    treatment_date DATE,
    treatment_type VARCHAR(100),
    description TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES DOCTORS(doctor_id)
);

CREATE TABLE Appointments (
    appointment_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    patient_id BIGINT,
    doctor_id BIGINT,
    treatment_id BIGINT,
    appointment_date_time DATETIME,
    duration INT,
    notes TEXT,
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES DOCTORS(doctor_id),
    FOREIGN KEY (treatment_id) REFERENCES Treatments(treatment_id)
);



-- THE ACCESSES HISTORY TO PATIENTS TABLE
CREATE TABLE ACCESSES_TO_PATIENT (
    ACCESS_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    PATIENT_ID BIGINT,
    DOCTOR_ID BIGINT,
    ACCESS_DATE DATETIME,
    ACCESS_TYPE ENUM('QUICK CHECK', 'NEW SESSION', 'UPDATE'),
    ACCESS_DURATION INT,
    INDEX IDX_ACCESS_TP (ACCESS_ID , PATIENT_ID , DOCTOR_ID),
    FOREIGN KEY (PATIENT_ID) REFERENCES patients(PATIENT_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);


-- THE ACCESSES HISTORY TO DOCTORS TABLE
CREATE TABLE ACCESSES_TO_DOCOTR (
    ACCESS_ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    DOCTOR_ID BIGINT,
    ACCESS_DATE DATETIME,
    ACCESS_DURATION INT,
    INDEX IDX_ACCESS_TP (ACCESS_ID , DOCTOR_ID),
    FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);